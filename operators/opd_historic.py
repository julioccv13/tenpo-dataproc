from pyspark.sql import SparkSession
import logging
from time import gmtime, strftime
from  pyspark.sql.functions import input_file_name
from google.cloud import bigquery
from google.cloud import storage
import os
import sys
from pyspark.sql.functions import *
from uuid import uuid4

logging.basicConfig(level=logging.INFO)

class Opd_historic:
	def __init__(self,type_process, spark,list_file,mode_deploy,output):
		self.mode_deploy = mode_deploy
		self.timestamp = strftime("%Y-%m-%d %H:%M:%S", gmtime())
		self.timestamp_bucket = strftime("%Y-%m-%d_%H-%M-%S", gmtime())
		self.output = output
		self.spark = spark
		self.list_file = list_file
		self.type_process = type_process


	def convert_opd_to_csv(self):

		for name_file in self.list_file :
			name_csv = name_file.replace("_encrypted","")
			os.system("hdfs dfs -put ./decrypted/ /")
			df = self.spark.read.option("sep", "|").option("header", "false").option("encoding", "ISO-8859-1").csv("hdfs:///decrypted/"+name_file)
			os.system("/usr/share/google/get_metadata_value attributes/dataproc-cluster-name>cluster_name.txt")
			cluster_name = open("./cluster_name.txt","r").read()
			df1 = df.withColumn("NAME_FILE_ENTIRE", input_file_name()).withColumn("NAME_FILE",regexp_replace("NAME_FILE_ENTIRE","hdfs://"+cluster_name+"-m/decrypted/","")).withColumn("ID_ROW", udf(lambda : str(uuid4()), StringType())()).withColumn("DATE_PROCESS_FILE",lit(self.timestamp)).withColumn("type_value_in_file",substring(df._c0,17,1)).withColumn("type_operation",substring(df._c0,163,2))

			try:
				#values rejected
				df_rejected = df1.filter( (df1.type_value_in_file != 'D') & (df1.type_value_in_file != 'P') & (df1.type_value_in_file != 'C') ).withColumn("TYPE_PROCESS",lit(self.type_process)).withColumn("REJECTED_MESSAGE", when((df1.type_value_in_file !='D') & (df1.type_value_in_file !='C') & (df1.type_value_in_file !='P'), lit("El valor no cumple con la estructura correcta") ).otherwise("") ).withColumn("REJECTED_VALUE",df1._c0).selectExpr('DATE_PROCESS_FILE','TYPE_PROCESS', 'NAME_FILE', 'ID_ROW', 'REJECTED_MESSAGE', 'REJECTED_VALUE')
				df_rejected.coalesce(1).write.options(header='True', delimiter=',').csv("hdfs:///opd_csv/"+name_csv+"/rejected/"+name_csv+".csv")
				logging.info(f"success to convert_opd_to_csv {name_file} rejected")
			except Exception as e:
				logging.error(f"failed to convert_opd_to_csv {name_file} rejected "+str(e)+"\n")

			try:
				#values with transaction OP in OPD file
				df_op = df1.filter( (df1.type_value_in_file  == 'D') & (df1.type_operation  == 'OP') )
				#df_op_fields = df_op.withColumn("HEADER_ROW",substring(df_op.value,0,120)).withColumn("CODENT",substring(df_op.value,121,4)).withColumn("CENTALTA",substring(df_op.value,125,4)).withColumn("CUENTA",substring(df_op.value,129,12)).withColumn("LAST_PAN",substring(df_op.value,141,22)).withColumn("TIPOREG",substring(df_op.value,163,2)).withColumn("NUMORDEN",substring(df_op.value,165,12)).withColumn("CLAMON",substring(df_op.value,177,3)).withColumn("DESCLAMON",substring(df_op.value,180,30)).withColumn("INDNORCOR",substring(df_op.value,210,1)).withColumn("DESNORC",substring(df_op.value,211,15)).withColumn("TIPOFAC",substring(df_op.value,226,4)).withColumn("DESTIPFAC",substring(df_op.value,230,30)).withColumn("FECFAC",substring(df_op.value,260,10)).withColumn("NUMREFFAC",substring(df_op.value,270,23)).withColumn("CLAMONDIV",substring(df_op.value,293,3)).withColumn("DESCLAMOND",substring(df_op.value,296,30)).withColumn("SIGNODIV",substring(df_op.value,326,1)).withColumn("IMPDIV",substring(df_op.value,327,17)).withColumn("SIGNOFAC",substring(df_op.value,344,1)).withColumn("IMPFAC",substring(df_op.value,345,17)).withColumn("CMBAPLI",substring(df_op.value,362,9)).withColumn("NUMAUT",substring(df_op.value,371,6)).withColumn("CODCOM",substring(df_op.value,377,15)).withColumn("NOMCOMRED",substring(df_op.value,392,27)).withColumn("CODACT",substring(df_op.value,419,4)).withColumn("DESACT",substring(df_op.value,423,30)).withColumn("SIGNOLIQ",substring(df_op.value,453,1)).withColumn("IMPLIQ",substring(df_op.value,454,17)).withColumn("CLAMONLIQ",substring(df_op.value,471,3)).withColumn("DESCLAMONL",substring(df_op.value,474,30)).withColumn("SIGNOIMPTO",substring(df_op.value,504,1)).withColumn("IMPIMPTO",substring(df_op.value,505,17)).withColumn("FECPROCES",substring(df_op.value,522,10)).withColumn("CODPAIS",substring(df_op.value,532,3)).withColumn("NOMPAIS",substring(df_op.value,535,30)).withColumn("NOMPOB",substring(df_op.value,565,26)).withColumn("FECCONTA",substring(df_op.value,591,10)).withColumn("ORIGENOPE",substring(df_op.value,601,4)).withColumn("DESORIG",substring(df_op.value,605,20)).withColumn("TIPFRAN",substring(df_op.value,625,4)).withColumn("DESFRA",substring(df_op.value,629,20)).withColumn("SECOPE",substring(df_op.value,649,12)).withColumn("NUMSECREC",substring(df_op.value,661,15)).withColumn("SESIONRED",substring(df_op.value,676,12)).withColumn("SIAIDCD",substring(df_op.value,688,19)).withColumn("CALFRAUDE",substring(df_op.value,707,3)).withColumn("TIPDOCPAG",substring(df_op.value,710,2)).withColumn("DESTIPDOC",substring(df_op.value,712,20)).withColumn("REFDOCPAG",substring(df_op.value,732,20)).withColumn("SIGNOAMORT",substring(df_op.value,752,1)).withColumn("IMPAMORT",substring(df_op.value,753,17)).withColumn("NUMMOVEXT",substring(df_op.value,770,7)).withColumn("NUMEXTCTA",substring(df_op.value,777,3)).withColumn("FECLIQ",substring(df_op.value,780,10)).withColumn("NUMMOVDEB",substring(df_op.value,790,9)).withColumn("IDENTCLI",substring(df_op.value,799,8)).withColumn("INDINCEST",substring(df_op.value,807,1)).withColumn("INDMOVANU",substring(df_op.value,808,1)).withColumn("DESMOVANU",substring(df_op.value,809,10)).withColumn("INDRET",substring(df_op.value,819,1)).withColumn("DESINDRET",substring(df_op.value,820,22)).withColumn("INDMOVEXT",substring(df_op.value,842,1)).withColumn("DESMOVEXT",substring(df_op.value,843,20)).withColumn("CODTIPC",substring(df_op.value,863,4)).withColumn("DESTIPC",substring(df_op.value,867,25)).withColumn("TOTCUOTAS",substring(df_op.value,892,9)).withColumn("PORINT",substring(df_op.value,901,7)).withColumn("NUMOPECUO",substring(df_op.value,908,6)).withColumn("SIGNOCUO",substring(df_op.value,914,1)).withColumn("IMPCUOTA",substring(df_op.value,915,17)).withColumn("INDDEBCRE",substring(df_op.value,932,1)).withColumn("DESDEBCRE",substring(df_op.value,933,10)).withColumn("TIPOLIN",substring(df_op.value,943,4)).withColumn("DESTIPOLIN",substring(df_op.value,947,20)).withColumn("FORPAGO",substring(df_op.value,967,2)).withColumn("DESFORPAG",substring(df_op.value,969,20)).withColumn("LINREF",substring(df_op.value,989,8)).withColumn("FILLER",substring(df_op.value,997,4))
				df_op_fields = df_op.withColumn("HEADER_ROW",substring(df_op._c0,0,120)).withColumn("CODENT",substring(df_op._c0,121,4)).withColumn("CENTALTA",substring(df_op._c0,125,4)).withColumn("CUENTA",substring(df_op._c0,129,12)).withColumn("LAST_PAN",substring(df_op._c0,141,22)).withColumn("TIPOREG",substring(df_op._c0,163,2)).withColumn("NUMORDEN",substring(df_op._c0,165,12)).withColumn("CLAMON",substring(df_op._c0,177,3)).withColumn("DESCLAMON",substring(df_op._c0,180,30)).withColumn("INDNORCOR",substring(df_op._c0,210,1)).withColumn("DESNORC",substring(df_op._c0,211,15)).withColumn("TIPOFAC",substring(df_op._c0,226,4)).withColumn("DESTIPFAC",substring(df_op._c0,230,30)).withColumn("FECFAC",substring(df_op._c0,260,10)).withColumn("NUMREFFAC",substring(df_op._c0,270,23)).withColumn("CLAMONDIV",substring(df_op._c0,293,3)).withColumn("DESCLAMOND",substring(df_op._c0,296,30)).withColumn("SIGNODIV",substring(df_op._c0,326,1)).withColumn("IMPDIV",substring(df_op._c0,327,17)).withColumn("SIGNOFAC",substring(df_op._c0,344,1)).withColumn("IMPFAC",substring(df_op._c0,345,17)).withColumn("CMBAPLI",substring(df_op._c0,362,9)).withColumn("NUMAUT",substring(df_op._c0,371,6)).withColumn("CODCOM",substring(df_op._c0,377,15)).withColumn("NOMCOMRED",substring(df_op._c0,392,27)).withColumn("CODACT",substring(df_op._c0,419,4)).withColumn("DESACT",substring(df_op._c0,423,30)).withColumn("SIGNOLIQ",substring(df_op._c0,453,1)).withColumn("IMPLIQ",substring(df_op._c0,454,17)).withColumn("CLAMONLIQ",substring(df_op._c0,471,3)).withColumn("DESCLAMONL",substring(df_op._c0,474,30)).withColumn("SIGNOIMPTO",substring(df_op._c0,504,1)).withColumn("IMPIMPTO",substring(df_op._c0,505,17)).withColumn("FECPROCES",substring(df_op._c0,522,10)).withColumn("CODPAIS",substring(df_op._c0,532,3)).withColumn("NOMPAIS",substring(df_op._c0,535,30)).withColumn("NOMPOB",substring(df_op._c0,565,26)).withColumn("FECCONTA",substring(df_op._c0,591,10)).withColumn("ORIGENOPE",substring(df_op._c0,601,4)).withColumn("DESORIG",substring(df_op._c0,605,20)).withColumn("TIPFRAN",substring(df_op._c0,625,4)).withColumn("DESFRA",substring(df_op._c0,629,20)).withColumn("SECOPE",substring(df_op._c0,649,12)).withColumn("NUMSECREC",substring(df_op._c0,661,15)).withColumn("SESIONRED",substring(df_op._c0,676,12)).withColumn("SIAIDCD",substring(df_op._c0,688,19)).withColumn("CALFRAUDE",substring(df_op._c0,707,3)).withColumn("TIPDOCPAG",substring(df_op._c0,710,2)).withColumn("DESTIPDOC",substring(df_op._c0,712,20)).withColumn("REFDOCPAG",substring(df_op._c0,732,20)).withColumn("SIGNOAMORT",substring(df_op._c0,752,1)).withColumn("IMPAMORT",substring(df_op._c0,753,17)).withColumn("NUMMOVEXT",substring(df_op._c0,770,7)).withColumn("NUMEXTCTA",substring(df_op._c0,777,3)).withColumn("FECLIQ",substring(df_op._c0,780,10)).withColumn("NUMMOVDEB",substring(df_op._c0,790,9)).withColumn("IDENTCLI",substring(df_op._c0,799,8)).withColumn("INDINCEST",substring(df_op._c0,807,1)).withColumn("INDMOVANU",substring(df_op._c0,808,1)).withColumn("DESMOVANU",substring(df_op._c0,809,10)).withColumn("INDRET",substring(df_op._c0,819,1)).withColumn("DESINDRET",substring(df_op._c0,820,22)).withColumn("INDMOVEXT",substring(df_op._c0,842,1)).withColumn("DESMOVEXT",substring(df_op._c0,843,20)).withColumn("CODTIPC",substring(df_op._c0,863,4)).withColumn("DESTIPC",substring(df_op._c0,867,25)).withColumn("TOTCUOTAS",substring(df_op._c0,892,9)).withColumn("PORINT",substring(df_op._c0,901,7)).withColumn("NUMOPECUO",substring(df_op._c0,908,6)).withColumn("SIGNOCUO",substring(df_op._c0,914,1)).withColumn("IMPCUOTA",substring(df_op._c0,915,17)).withColumn("INDDEBCRE",substring(df_op._c0,932,1)).withColumn("DESDEBCRE",substring(df_op._c0,933,10)).withColumn("TIPOLIN",substring(df_op._c0,943,4)).withColumn("DESTIPOLIN",substring(df_op._c0,947,20)).withColumn("FORPAGO",substring(df_op._c0,967,2)).withColumn("DESFORPAG",substring(df_op._c0,969,20)).withColumn("LINREF",substring(df_op._c0,989,8)).withColumn("HORTRN",substring(df_op._c0,997,8)).withColumn("RUT",substring(df_op._c0,1005,22)).withColumn("INDINCI",substring(df_op._c0,1027,1)).withColumn("INDADUIR",substring(df_op._c0,1028,11)).withColumn("TIPCLIEN",substring(df_op._c0,1039,2)).withColumn("PRODUCTO",substring(df_op._c0,1041,2)).withColumn("SUBPRODU",substring(df_op._c0,1043,4)).withColumn("INDTIPT",substring(df_op._c0,1047,2)).withColumn("CICLOVIDA",substring(df_op._c0,1049,15)).withColumn("REFEXT",substring(df_op._c0,1064,50)).withColumn("FILLER",substring(df_op._c0,1114,6))
				df_op_final = df_op_fields.withColumn("PAN", when(trim(df_op_fields.LAST_PAN) != "",concat(substring(df_op_fields.LAST_PAN,0,6),lit("*"*6),substring(df_op_fields.LAST_PAN,13,4))).otherwise(df_op_fields.LAST_PAN)).selectExpr('DATE_PROCESS_FILE', 'NAME_FILE', 'ID_ROW', 'HEADER_ROW', 'CODENT', 'CENTALTA', 'CUENTA', 'PAN', 'TIPOREG', 'NUMORDEN', 'CLAMON', 'DESCLAMON', 'INDNORCOR', 'DESNORC', 'TIPOFAC', 'DESTIPFAC', 'FECFAC', 'NUMREFFAC', 'CLAMONDIV', 'DESCLAMOND', 'SIGNODIV', 'IMPDIV', 'SIGNOFAC', 'IMPFAC', 'CMBAPLI', 'NUMAUT', 'CODCOM', 'NOMCOMRED', 'CODACT', 'DESACT', 'SIGNOLIQ', 'IMPLIQ', 'CLAMONLIQ', 'DESCLAMONL', 'SIGNOIMPTO', 'IMPIMPTO', 'FECPROCES', 'CODPAIS', 'NOMPAIS', 'NOMPOB', 'FECCONTA', 'ORIGENOPE', 'DESORIG', 'TIPFRAN', 'DESFRA', 'SECOPE', 'NUMSECREC', 'SESIONRED', 'SIAIDCD', 'CALFRAUDE', 'TIPDOCPAG', 'DESTIPDOC', 'REFDOCPAG', 'SIGNOAMORT', 'IMPAMORT', 'NUMMOVEXT', 'NUMEXTCTA', 'FECLIQ', 'NUMMOVDEB', 'IDENTCLI', 'INDINCEST', 'INDMOVANU', 'DESMOVANU', 'INDRET', 'DESINDRET', 'INDMOVEXT', 'DESMOVEXT', 'CODTIPC', 'DESTIPC', 'TOTCUOTAS', 'PORINT', 'NUMOPECUO', 'SIGNOCUO', 'IMPCUOTA', 'INDDEBCRE', 'DESDEBCRE', 'TIPOLIN', 'DESTIPOLIN', 'FORPAGO', 'DESFORPAG', 'LINREF', 'HORTRN', 'RUT','INDINCI','INDADUIR','TIPCLIEN','PRODUCTO','SUBPRODU','INDTIPT','CICLOVIDA','REFEXT','FILLER')
				df_op_final.coalesce(1).write.options(header='True', delimiter=',').csv("hdfs:///opd_csv/"+name_csv+"/OP/"+name_csv+".csv")
				logging.info(f"success to convert_opd_to_df {name_file} OP")
			except Exception as e:
				logging.error(f"failed to convert_opd_to_df {name_file} OP "+str(e)+"\n")

			try:
				#values with transaction CE in OPD file
				df_ce = df1.filter( (df1.type_value_in_file  == 'D') & (df1.type_operation  == 'CE') )
				#df_ce_fields = df_ce.withColumn("HEADER_ROW",substring(df_ce.value,0,120)).withColumn("CODENT",substring(df_ce.value,121,4)).withColumn("CENTALTA",substring(df_ce.value,125,4)).withColumn("CUENTA",substring(df_ce.value,129,12)).withColumn("LAST_PAN",substring(df_ce.value,141,22)).withColumn("TIPOREG",substring(df_ce.value,163,2)).withColumn("NUMORDEN",substring(df_ce.value,165,12)).withColumn("NUMMOVEXT",substring(df_ce.value,177,7)).withColumn("NUMEXTCTA",substring(df_ce.value,184,3)).withColumn("PORINT",substring(df_ce.value,187,7)).withColumn("SIGNOAPL",substring(df_ce.value,194,1)).withColumn("IMPAPL",substring(df_ce.value,195,17)).withColumn("SIGNOLIQUI",substring(df_ce.value,212,1)).withColumn("IMPLIQUI",substring(df_ce.value,213,17)).withColumn("FECULTCAL",substring(df_ce.value,230,10)).withColumn("ESTCONECO",substring(df_ce.value,240,1)).withColumn("DESESTCONECO",substring(df_ce.value,241,30)).withColumn("NUMMOVDEB",substring(df_ce.value,271,9)).withColumn("NUMOPECUO",substring(df_ce.value,280,6)).withColumn("NUMFINAN",substring(df_ce.value,286,3)).withColumn("NUMCUOTA",substring(df_ce.value,289,9)).withColumn("CODCONECO",substring(df_ce.value,298,4)).withColumn("DESCONECO",substring(df_ce.value,302,30)).withColumn("TIPIMP",substring(df_ce.value,332,2)).withColumn("DESIMP",substring(df_ce.value,334,30)).withColumn("SIGNOAPLI",substring(df_ce.value,364,1)).withColumn("IMPAPLECO",substring(df_ce.value,365,17)).withColumn("SIGNOBRU",substring(df_ce.value,382,1)).withColumn("IMPBRUECO",substring(df_ce.value,383,17)).withColumn("SIGNOBON",substring(df_ce.value,400,1)).withColumn("IMPBONECO",substring(df_ce.value,401,17)).withColumn("SIGNOIMPTO",substring(df_ce.value,418,1)).withColumn("IMPIMPTO",substring(df_ce.value,419,17)).withColumn("FILLER",substring(df_ce.value,436,565))
				df_ce_fields = df_ce.withColumn("HEADER_ROW",substring(df_ce._c0,0,120)).withColumn("CODENT",substring(df_ce._c0,121,4)).withColumn("CENTALTA",substring(df_ce._c0,125,4)).withColumn("CUENTA",substring(df_ce._c0,129,12)).withColumn("LAST_PAN",substring(df_ce._c0,141,22)).withColumn("TIPOREG",substring(df_ce._c0,163,2)).withColumn("NUMORDEN",substring(df_ce._c0,165,12)).withColumn("NUMMOVEXT",substring(df_ce._c0,177,7)).withColumn("NUMEXTCTA",substring(df_ce._c0,184,3)).withColumn("PORINT",substring(df_ce._c0,187,7)).withColumn("SIGNOAPL",substring(df_ce._c0,194,1)).withColumn("IMPAPL",substring(df_ce._c0,195,17)).withColumn("SIGNOLIQUI",substring(df_ce._c0,212,1)).withColumn("IMPLIQUI",substring(df_ce._c0,213,17)).withColumn("FECULTCAL",substring(df_ce._c0,230,10)).withColumn("ESTCONECO",substring(df_ce._c0,240,1)).withColumn("DESESTCONECO",substring(df_ce._c0,241,30)).withColumn("NUMMOVDEB",substring(df_ce._c0,271,9)).withColumn("NUMOPECUO",substring(df_ce._c0,280,6)).withColumn("NUMFINAN",substring(df_ce._c0,286,3)).withColumn("NUMCUOTA",substring(df_ce._c0,289,9)).withColumn("CODCONECO",substring(df_ce._c0,298,4)).withColumn("DESCONECO",substring(df_ce._c0,302,30)).withColumn("TIPIMP",substring(df_ce._c0,332,2)).withColumn("DESIMP",substring(df_ce._c0,334,30)).withColumn("SIGNOAPLI",substring(df_ce._c0,364,1)).withColumn("IMPAPLECO",substring(df_ce._c0,365,17)).withColumn("SIGNOBRU",substring(df_ce._c0,382,1)).withColumn("IMPBRUECO",substring(df_ce._c0,383,17)).withColumn("SIGNOBON",substring(df_ce._c0,400,1)).withColumn("IMPBONECO",substring(df_ce._c0,401,17)).withColumn("SIGNOIMPTO",substring(df_ce._c0,418,1)).withColumn("IMPIMPTO",substring(df_ce._c0,419,17)).withColumn("FILLER",substring(df_ce._c0,436,565))
				df_ce_final = df_ce_fields.withColumn("PAN", when(trim(df_ce_fields.LAST_PAN) != "",concat(substring(df_ce_fields.LAST_PAN,0,6),lit("*"*6),substring(df_ce_fields.LAST_PAN,13,4))).otherwise(df_ce_fields.LAST_PAN)).selectExpr('DATE_PROCESS_FILE', 'NAME_FILE', 'ID_ROW', 'HEADER_ROW', 'CODENT', 'CENTALTA', 'CUENTA', 'PAN', 'TIPOREG', 'NUMORDEN', 'NUMMOVEXT', 'NUMEXTCTA', 'PORINT', 'SIGNOAPL', 'IMPAPL', 'SIGNOLIQUI', 'IMPLIQUI', 'FECULTCAL', 'ESTCONECO', 'DESESTCONECO', 'NUMMOVDEB', 'NUMOPECUO', 'NUMFINAN', 'NUMCUOTA', 'CODCONECO', 'DESCONECO', 'TIPIMP', 'DESIMP', 'SIGNOAPLI', 'IMPAPLECO', 'SIGNOBRU', 'IMPBRUECO', 'SIGNOBON', 'IMPBONECO', 'SIGNOIMPTO', 'IMPIMPTO', 'FILLER')
				df_ce_final.coalesce(1).write.options(header='True', delimiter=',').csv("hdfs:///opd_csv/"+name_csv+"/CE/"+name_csv+".csv")
				logging.info(f"success to convert_opd_to_df {name_file} CE")
			except Exception as e:
				logging.error(f"failed to convert_opd_to_df {name_file} CE "+str(e)+"\n")

			try:
				#values with transaction AU in OPD file
				df_au = df1.filter( (df1.type_value_in_file  == 'D') & (df1.type_operation  == 'AU') )
				#df_au_fields = df_au.withColumn("HEADER_ROW",substring(df_au.value,0,120)).withColumn("CODENT",substring(df_au.value,121,4)).withColumn("CENTALTA",substring(df_au.value,125,4)).withColumn("CUENTA",substring(df_au.value,129,12)).withColumn("LAST_PAN",substring(df_au.value,141,22)).withColumn("TIPOREG",substring(df_au.value,163,2)).withColumn("NUMORDEN",substring(df_au.value,165,12)).withColumn("CLAMON1",substring(df_au.value,177,3)).withColumn("DESCLAMON1",substring(df_au.value,180,30)).withColumn("INDNORCOR",substring(df_au.value,210,1)).withColumn("DESNORC",substring(df_au.value,211,30)).withColumn("TIPOFAC1",substring(df_au.value,241,4)).withColumn("DESTIPFAC1",substring(df_au.value,245,30)).withColumn("FECTRN",substring(df_au.value,275,10)).withColumn("HORTRN",substring(df_au.value,285,8)).withColumn("CLAMONDIV",substring(df_au.value,293,3)).withColumn("DESCLAMOND",substring(df_au.value,296,30)).withColumn("SIGNODIV",substring(df_au.value,326,1)).withColumn("IMPDIV",substring(df_au.value,327,17)).withColumn("SIGNOAUT",substring(df_au.value,344,1)).withColumn("IMPAUTCON",substring(df_au.value,345,17)).withColumn("CMBAPLI",substring(df_au.value,362,9)).withColumn("NUMAUT",substring(df_au.value,371,6)).withColumn("CODCOM",substring(df_au.value,377,15)).withColumn("NOMCOMRED",substring(df_au.value,392,27)).withColumn("CODACT1",substring(df_au.value,419,4)).withColumn("DESACT1",substring(df_au.value,423,30)).withColumn("SIGNOCCA",substring(df_au.value,453,1)).withColumn("IMPCCA",substring(df_au.value,454,17)).withColumn("CLAMONCCA",substring(df_au.value,471,3)).withColumn("DESCLAMOCCA",substring(df_au.value,474,30)).withColumn("FILLER",substring(df_au.value,504,497))
				df_au_fields = df_au.withColumn("HEADER_ROW",substring(df_au._c0,0,120)).withColumn("CODENT",substring(df_au._c0,121,4)).withColumn("CENTALTA",substring(df_au._c0,125,4)).withColumn("CUENTA",substring(df_au._c0,129,12)).withColumn("LAST_PAN",substring(df_au._c0,141,22)).withColumn("TIPOREG",substring(df_au._c0,163,2)).withColumn("NUMORDEN",substring(df_au._c0,165,12)).withColumn("CLAMON1",substring(df_au._c0,177,3)).withColumn("DESCLAMON1",substring(df_au._c0,180,30)).withColumn("INDNORCOR",substring(df_au._c0,210,1)).withColumn("DESNORC",substring(df_au._c0,211,30)).withColumn("TIPOFAC1",substring(df_au._c0,241,4)).withColumn("DESTIPFAC1",substring(df_au._c0,245,30)).withColumn("FECTRN",substring(df_au._c0,275,10)).withColumn("HORTRN",substring(df_au._c0,285,8)).withColumn("CLAMONDIV",substring(df_au._c0,293,3)).withColumn("DESCLAMOND",substring(df_au._c0,296,30)).withColumn("SIGNODIV",substring(df_au._c0,326,1)).withColumn("IMPDIV",substring(df_au._c0,327,17)).withColumn("SIGNOAUT",substring(df_au._c0,344,1)).withColumn("IMPAUTCON",substring(df_au._c0,345,17)).withColumn("CMBAPLI",substring(df_au._c0,362,9)).withColumn("NUMAUT",substring(df_au._c0,371,6)).withColumn("CODCOM",substring(df_au._c0,377,15)).withColumn("NOMCOMRED",substring(df_au._c0,392,27)).withColumn("CODACT1",substring(df_au._c0,419,4)).withColumn("DESACT1",substring(df_au._c0,423,30)).withColumn("SIGNOCCA",substring(df_au._c0,453,1)).withColumn("IMPCCA",substring(df_au._c0,454,17)).withColumn("CLAMONCCA",substring(df_au._c0,471,3)).withColumn("DESCLAMOCCA",substring(df_au._c0,474,30)).withColumn("IMPTRN",substring(df_au._c0,504,17)).withColumn("IMPCOMI",substring(df_au._c0,521,17)).withColumn("RUT",substring(df_au._c0,538,22)).withColumn("INDADUIR",substring(df_au._c0,560,11)).withColumn("INDPREAUT",substring(df_au._c0,571,1)).withColumn("TIPCLIEN",substring(df_au._c0,572,2))
				df_au_final = df_au_fields.withColumn("PAN", when(trim(df_au_fields.LAST_PAN) != "",concat(substring(df_au_fields.LAST_PAN,0,6),lit("*"*6),substring(df_au_fields.LAST_PAN,13,4))).otherwise(df_au_fields.LAST_PAN)).selectExpr('DATE_PROCESS_FILE', 'NAME_FILE', 'ID_ROW', 'HEADER_ROW', 'CODENT', 'CENTALTA', 'CUENTA', 'PAN', 'TIPOREG', 'NUMORDEN', 'CLAMON1', 'DESCLAMON1', 'INDNORCOR', 'DESNORC', 'TIPOFAC1', 'DESTIPFAC1', 'FECTRN', 'HORTRN', 'CLAMONDIV', 'DESCLAMOND', 'SIGNODIV', 'IMPDIV', 'SIGNOAUT', 'IMPAUTCON', 'CMBAPLI', 'NUMAUT', 'CODCOM', 'NOMCOMRED', 'CODACT1', 'DESACT1', 'SIGNOCCA', 'IMPCCA', 'CLAMONCCA', 'DESCLAMOCCA', 'IMPTRN','IMPCOMI','RUT','INDADUIR','INDPREAUT','TIPCLIEN')
				df_au_final.coalesce(1).write.options(header='True', delimiter=',').csv("hdfs:///opd_csv/"+name_csv+"/AU/"+name_csv+".csv")
				logging.info(f"success to convert_opd_to_df {name_file} AU")
			except Exception as e:
				logging.error(f"failed to convert_opd_to_df {name_file} AU "+str(e)+"\n")

			try:
				#values with transaction CG in OPD file
				df_cg = df1.filter( (df1.type_value_in_file  == 'D') & (df1.type_operation  == 'CG') )
				#df_cg_fields = df_cg.withColumn("HEADER_ROW",substring(df_cg.value,0,120)).withColumn("CODENT",substring(df_cg.value,121,4)).withColumn("CENTALTA",substring(df_cg.value,125,4)).withColumn("CUENTA",substring(df_cg.value,129,12)).withColumn("LAST_PAN",substring(df_cg.value,141,22)).withColumn("TIPOREG",substring(df_cg.value,163,2)).withColumn("NUMORDEN",substring(df_cg.value,165,12)).withColumn("NUMSECIMP",substring(df_cg.value,177,15)).withColumn("NUMMOV",substring(df_cg.value,192,7)).withColumn("CLAMON2",substring(df_cg.value,199,3)).withColumn("DESCLAMON2",substring(df_cg.value,202,30)).withColumn("INDNORCOR",substring(df_cg.value,232,1)).withColumn("TIPOFAC2",substring(df_cg.value,233,4)).withColumn("DESTIPFAC2",substring(df_cg.value,237,30)).withColumn("FECFAC",substring(df_cg.value,267,10)).withColumn("NUMREFFAC",substring(df_cg.value,277,23)).withColumn("CLAMONDIV2",substring(df_cg.value,300,3)).withColumn("DESCLAMOND2",substring(df_cg.value,303,30)).withColumn("SIGNODIV",substring(df_cg.value,333,1)).withColumn("IMPDIV",substring(df_cg.value,334,17)).withColumn("SIGNOFAC",substring(df_cg.value,351,1)).withColumn("IMPFAC",substring(df_cg.value,352,17)).withColumn("CMBAPLI",substring(df_cg.value,369,9)).withColumn("NUMAUT",substring(df_cg.value,378,6)).withColumn("CODCOM",substring(df_cg.value,384,15)).withColumn("NOMCOMRED",substring(df_cg.value,399,27)).withColumn("CODACT",substring(df_cg.value,426,4)).withColumn("DESACT2",substring(df_cg.value,430,30)).withColumn("SIGNOLIQ",substring(df_cg.value,460,1)).withColumn("IMPLIQ",substring(df_cg.value,461,17)).withColumn("CLAMONLIQ2",substring(df_cg.value,478,3)).withColumn("DESCLAMONL2",substring(df_cg.value,481,30)).withColumn("SIGNOIMPTO",substring(df_cg.value,511,1)).withColumn("IMPIMPTO",substring(df_cg.value,512,17)).withColumn("FECPROCES",substring(df_cg.value,529,10)).withColumn("CODPAIS2",substring(df_cg.value,539,3)).withColumn("NOMPAIS2",substring(df_cg.value,542,30)).withColumn("NOMPOB",substring(df_cg.value,572,26)).withColumn("FECCONTA",substring(df_cg.value,598,10)).withColumn("ORIGENOPE",substring(df_cg.value,608,4)).withColumn("DESORIG",substring(df_cg.value,612,30)).withColumn("TIPFRAN",substring(df_cg.value,642,4)).withColumn("DESFRA",substring(df_cg.value,646,30)).withColumn("SECOPE",substring(df_cg.value,676,12)).withColumn("NUMSECREC",substring(df_cg.value,688,15)).withColumn("SESIONRED",substring(df_cg.value,703,12)).withColumn("SIAIDCD",substring(df_cg.value,715,19)).withColumn("TIPDOCPAG",substring(df_cg.value,734,2)).withColumn("DESTIPDOC",substring(df_cg.value,736,30)).withColumn("REFDOCPAG",substring(df_cg.value,766,20)).withColumn("CALFRAUDE",substring(df_cg.value,786,3)).withColumn("FECLIQ",substring(df_cg.value,789,10)).withColumn("SIGNOAMORT",substring(df_cg.value,799,1)).withColumn("IMPAMORT",substring(df_cg.value,800,17)).withColumn("IDENTCLI",substring(df_cg.value,817,8)).withColumn("FILLER",substring(df_cg.value,825,176))
				df_cg_fields = df_cg.withColumn("HEADER_ROW",substring(df_cg._c0,0,120)).withColumn("CODENT",substring(df_cg._c0,121,4)).withColumn("CENTALTA",substring(df_cg._c0,125,4)).withColumn("CUENTA",substring(df_cg._c0,129,12)).withColumn("LAST_PAN",substring(df_cg._c0,141,22)).withColumn("TIPOREG",substring(df_cg._c0,163,2)).withColumn("NUMORDEN",substring(df_cg._c0,165,12)).withColumn("NUMSECIMP",substring(df_cg._c0,177,15)).withColumn("NUMMOV",substring(df_cg._c0,192,7)).withColumn("CLAMON2",substring(df_cg._c0,199,3)).withColumn("DESCLAMON2",substring(df_cg._c0,202,30)).withColumn("INDNORCOR",substring(df_cg._c0,232,1)).withColumn("TIPOFAC2",substring(df_cg._c0,233,4)).withColumn("DESTIPFAC2",substring(df_cg._c0,237,30)).withColumn("FECFAC",substring(df_cg._c0,267,10)).withColumn("NUMREFFAC",substring(df_cg._c0,277,23)).withColumn("CLAMONDIV2",substring(df_cg._c0,300,3)).withColumn("DESCLAMOND2",substring(df_cg._c0,303,30)).withColumn("SIGNODIV",substring(df_cg._c0,333,1)).withColumn("IMPDIV",substring(df_cg._c0,334,17)).withColumn("SIGNOFAC",substring(df_cg._c0,351,1)).withColumn("IMPFAC",substring(df_cg._c0,352,17)).withColumn("CMBAPLI",substring(df_cg._c0,369,9)).withColumn("NUMAUT",substring(df_cg._c0,378,6)).withColumn("CODCOM",substring(df_cg._c0,384,15)).withColumn("NOMCOMRED",substring(df_cg._c0,399,27)).withColumn("CODACT",substring(df_cg._c0,426,4)).withColumn("DESACT2",substring(df_cg._c0,430,30)).withColumn("SIGNOLIQ",substring(df_cg._c0,460,1)).withColumn("IMPLIQ",substring(df_cg._c0,461,17)).withColumn("CLAMONLIQ2",substring(df_cg._c0,478,3)).withColumn("DESCLAMONL2",substring(df_cg._c0,481,30)).withColumn("SIGNOIMPTO",substring(df_cg._c0,511,1)).withColumn("IMPIMPTO",substring(df_cg._c0,512,17)).withColumn("FECPROCES",substring(df_cg._c0,529,10)).withColumn("CODPAIS2",substring(df_cg._c0,539,3)).withColumn("NOMPAIS2",substring(df_cg._c0,542,30)).withColumn("NOMPOB",substring(df_cg._c0,572,26)).withColumn("FECCONTA",substring(df_cg._c0,598,10)).withColumn("ORIGENOPE",substring(df_cg._c0,608,4)).withColumn("DESORIG",substring(df_cg._c0,612,30)).withColumn("TIPFRAN",substring(df_cg._c0,642,4)).withColumn("DESFRA",substring(df_cg._c0,646,30)).withColumn("SECOPE",substring(df_cg._c0,676,12)).withColumn("NUMSECREC",substring(df_cg._c0,688,15)).withColumn("SESIONRED",substring(df_cg._c0,703,12)).withColumn("SIAIDCD",substring(df_cg._c0,715,19)).withColumn("TIPDOCPAG",substring(df_cg._c0,734,2)).withColumn("DESTIPDOC",substring(df_cg._c0,736,30)).withColumn("REFDOCPAG",substring(df_cg._c0,766,20)).withColumn("CALFRAUDE",substring(df_cg._c0,786,3)).withColumn("FECLIQ",substring(df_cg._c0,789,10)).withColumn("SIGNOAMORT",substring(df_cg._c0,799,1)).withColumn("IMPAMORT",substring(df_cg._c0,800,17)).withColumn("IDENTCLI",substring(df_cg._c0,817,8)).withColumn("FILLER",substring(df_cg._c0,825,176))
				df_cg_final = df_cg_fields.withColumn("PAN", when(trim(df_cg_fields.LAST_PAN) != "",concat(substring(df_cg_fields.LAST_PAN,0,6),lit("*"*6),substring(df_cg_fields.LAST_PAN,13,4))).otherwise(df_cg_fields.LAST_PAN)).selectExpr('DATE_PROCESS_FILE', 'NAME_FILE', 'ID_ROW', 'HEADER_ROW', 'CODENT', 'CENTALTA', 'CUENTA', 'PAN', 'TIPOREG', 'NUMORDEN', 'NUMSECIMP', 'NUMMOV', 'CLAMON2', 'DESCLAMON2', 'INDNORCOR', 'TIPOFAC2', 'DESTIPFAC2', 'FECFAC', 'NUMREFFAC', 'CLAMONDIV2', 'DESCLAMOND2', 'SIGNODIV', 'IMPDIV', 'SIGNOFAC', 'IMPFAC', 'CMBAPLI', 'NUMAUT', 'CODCOM', 'NOMCOMRED', 'CODACT', 'DESACT2', 'SIGNOLIQ', 'IMPLIQ', 'CLAMONLIQ2', 'DESCLAMONL2', 'SIGNOIMPTO', 'IMPIMPTO', 'FECPROCES', 'CODPAIS2', 'NOMPAIS2', 'NOMPOB', 'FECCONTA', 'ORIGENOPE', 'DESORIG', 'TIPFRAN', 'DESFRA', 'SECOPE', 'NUMSECREC', 'SESIONRED', 'SIAIDCD', 'TIPDOCPAG', 'DESTIPDOC', 'REFDOCPAG', 'CALFRAUDE', 'FECLIQ', 'SIGNOAMORT', 'IMPAMORT', 'IDENTCLI', 'FILLER')
				df_cg_final.coalesce(1).write.options(header='True', delimiter=',').csv("hdfs:///opd_csv/"+name_csv+"/CG/"+name_csv+".csv")
				logging.info(f"success to convert_opd_to_df {name_file} CG")
			except Exception as e:
				logging.error(f"failed to convert_opd_to_df {name_file} CG "+str(e)+"\n")

			try:
				#values with transaction AX in OPD file
				df_ax = df1.filter( (df1.type_value_in_file  == 'D') & (df1.type_operation  == 'AX') )
				#df_cg_fields = df_cg.withColumn("HEADER_ROW",substring(df_cg.value,0,120)).withColumn("CODENT",substring(df_cg.value,121,4)).withColumn("CENTALTA",substring(df_cg.value,125,4)).withColumn("CUENTA",substring(df_cg.value,129,12)).withColumn("LAST_PAN",substring(df_cg.value,141,22)).withColumn("TIPOREG",substring(df_cg.value,163,2)).withColumn("NUMORDEN",substring(df_cg.value,165,12)).withColumn("NUMSECIMP",substring(df_cg.value,177,15)).withColumn("NUMMOV",substring(df_cg.value,192,7)).withColumn("CLAMON2",substring(df_cg.value,199,3)).withColumn("DESCLAMON2",substring(df_cg.value,202,30)).withColumn("INDNORCOR",substring(df_cg.value,232,1)).withColumn("TIPOFAC2",substring(df_cg.value,233,4)).withColumn("DESTIPFAC2",substring(df_cg.value,237,30)).withColumn("FECFAC",substring(df_cg.value,267,10)).withColumn("NUMREFFAC",substring(df_cg.value,277,23)).withColumn("CLAMONDIV2",substring(df_cg.value,300,3)).withColumn("DESCLAMOND2",substring(df_cg.value,303,30)).withColumn("SIGNODIV",substring(df_cg.value,333,1)).withColumn("IMPDIV",substring(df_cg.value,334,17)).withColumn("SIGNOFAC",substring(df_cg.value,351,1)).withColumn("IMPFAC",substring(df_cg.value,352,17)).withColumn("CMBAPLI",substring(df_cg.value,369,9)).withColumn("NUMAUT",substring(df_cg.value,378,6)).withColumn("CODCOM",substring(df_cg.value,384,15)).withColumn("NOMCOMRED",substring(df_cg.value,399,27)).withColumn("CODACT",substring(df_cg.value,426,4)).withColumn("DESACT2",substring(df_cg.value,430,30)).withColumn("SIGNOLIQ",substring(df_cg.value,460,1)).withColumn("IMPLIQ",substring(df_cg.value,461,17)).withColumn("CLAMONLIQ2",substring(df_cg.value,478,3)).withColumn("DESCLAMONL2",substring(df_cg.value,481,30)).withColumn("SIGNOIMPTO",substring(df_cg.value,511,1)).withColumn("IMPIMPTO",substring(df_cg.value,512,17)).withColumn("FECPROCES",substring(df_cg.value,529,10)).withColumn("CODPAIS2",substring(df_cg.value,539,3)).withColumn("NOMPAIS2",substring(df_cg.value,542,30)).withColumn("NOMPOB",substring(df_cg.value,572,26)).withColumn("FECCONTA",substring(df_cg.value,598,10)).withColumn("ORIGENOPE",substring(df_cg.value,608,4)).withColumn("DESORIG",substring(df_cg.value,612,30)).withColumn("TIPFRAN",substring(df_cg.value,642,4)).withColumn("DESFRA",substring(df_cg.value,646,30)).withColumn("SECOPE",substring(df_cg.value,676,12)).withColumn("NUMSECREC",substring(df_cg.value,688,15)).withColumn("SESIONRED",substring(df_cg.value,703,12)).withColumn("SIAIDCD",substring(df_cg.value,715,19)).withColumn("TIPDOCPAG",substring(df_cg.value,734,2)).withColumn("DESTIPDOC",substring(df_cg.value,736,30)).withColumn("REFDOCPAG",substring(df_cg.value,766,20)).withColumn("CALFRAUDE",substring(df_cg.value,786,3)).withColumn("FECLIQ",substring(df_cg.value,789,10)).withColumn("SIGNOAMORT",substring(df_cg.value,799,1)).withColumn("IMPAMORT",substring(df_cg.value,800,17)).withColumn("IDENTCLI",substring(df_cg.value,817,8)).withColumn("FILLER",substring(df_cg.value,825,176))
				df_ax_fields = df_ax.withColumn("HEADER_ROW",substring(df_ax._c0,0,120)).withColumn("CODENT",substring(df_ax._c0,121,4)).withColumn("CENTALTA",substring(df_ax._c0,125,4)).withColumn("CUENTA",substring(df_ax._c0,129,12)).withColumn("LAST_PAN",substring(df_ax._c0,141,22)).withColumn("TIPOREG",substring(df_ax._c0,163,2)).withColumn("NUMORDEN",substring(df_ax._c0,165,12)).withColumn("CODENT_2",substring(df_ax._c0,177,4)).withColumn("CENTALTA_2",substring(df_ax._c0,181,4)).withColumn("CUENTA_2",substring(df_ax._c0,185,12)).withColumn("TIPOMSGON",substring(df_ax._c0,197,4)).withColumn("COD_PROCESO",substring(df_ax._c0,201,6)).withColumn("SIAIDCD",substring(df_ax._c0,207,19)).withColumn("LAST_PAN_2",substring(df_ax._c0,226,20)).withColumn("FECTRN",substring(df_ax._c0,246,10)).withColumn("HORTRN",substring(df_ax._c0,256,8)).withColumn("MONEDA",substring(df_ax._c0,264,3)).withColumn("DESCLAMON1",substring(df_ax._c0,267,30)).withColumn("SIGNOTRNCON",substring(df_ax._c0,297,1)).withColumn("IMPTRNCON",substring(df_ax._c0,298,17)).withColumn("SIGNOAUT",substring(df_ax._c0,315,1)).withColumn("IMPAUT",substring(df_ax._c0,316,17)).withColumn("INDNORCOR",substring(df_ax._c0,333,1)).withColumn("DESNORC",substring(df_ax._c0,334,30)).withColumn("TIPOFAC1",substring(df_ax._c0,364,4)).withColumn("DESTIPFAC1",substring(df_ax._c0,368,30)).withColumn("CLAMONDIV",substring(df_ax._c0,398,3)).withColumn("DESCLAMOND",substring(df_ax._c0,401,30)).withColumn("SIGNODIV",substring(df_ax._c0,431,1)).withColumn("IMPDIV",substring(df_ax._c0,432,17)).withColumn("CMBAPLI",substring(df_ax._c0,449,13)).withColumn("NUMAUT",substring(df_ax._c0,462,6)).withColumn("CODCOM",substring(df_ax._c0,468,15)).withColumn("NOMCOMRED",substring(df_ax._c0,483,27)).withColumn("CODACT1",substring(df_ax._c0,510,4)).withColumn("DESACT1",substring(df_ax._c0,514,30)).withColumn("SIGNOCCA",substring(df_ax._c0,544,1)).withColumn("IMPCCA",substring(df_ax._c0,545,17)).withColumn("CLAMONCCA",substring(df_ax._c0,562,3)).withColumn("DESCLAMOCCA",substring(df_ax._c0,565,30)).withColumn("IMPTRN",substring(df_ax._c0,595,17)).withColumn("IMPCOMI",substring(df_ax._c0,612,17)).withColumn("RUT",substring(df_ax._c0,629,22)).withColumn("INDADUIR",substring(df_ax._c0,651,11)).withColumn("INDPREAUT",substring(df_ax._c0,662,1)).withColumn("TIPCLIEN",substring(df_ax._c0,663,2)).withColumn("FILLER",substring(df_ax._c0,665,406))
				df_ax_final = df_ax_fields.withColumn("PAN", when(trim(df_ax_fields.LAST_PAN) != "",concat(substring(df_ax_fields.LAST_PAN,0,6),lit("*"*6),substring(df_ax_fields.LAST_PAN,13,4))).otherwise(df_ax_fields.LAST_PAN)).withColumn("PAN_2", when(trim(df_ax_fields.LAST_PAN_2) != "",concat(substring(df_ax_fields.LAST_PAN_2,0,6),lit("*"*6),substring(df_ax_fields.LAST_PAN_2,13,4))).otherwise(df_ax_fields.LAST_PAN_2)).selectExpr('DATE_PROCESS_FILE', 'NAME_FILE', 'ID_ROW', 'HEADER_ROW', 'CODENT', 'CENTALTA', 'CUENTA', 'PAN', 'TIPOREG', 'NUMORDEN', 'CODENT_2', 'CENTALTA_2', 'CUENTA_2', 'COD_PROCESO', 'SIAIDCD', 'PAN_2', 'FECTRN', 'HORTRN', 'MONEDA', 'DESCLAMON1', 'SIGNOTRNCON', 'IMPTRNCON', 'SIGNOAUT', 'IMPAUT', 'INDNORCOR', 'DESNORC', 'TIPOFAC1', 'DESTIPFAC1', 'CLAMONDIV', 'DESCLAMOND', 'SIGNODIV', 'IMPDIV', 'CMBAPLI', 'NUMAUT', 'CODCOM', 'NOMCOMRED', 'CODACT1', 'DESACT1', 'SIGNOCCA', 'IMPCCA', 'CLAMONCCA', 'DESCLAMOCCA', 'IMPTRN', 'IMPCOMI', 'RUT', 'INDADUIR', 'INDPREAUT', 'TIPCLIEN', 'FILLER')
				df_ax_final.coalesce(1).write.options(header='True', delimiter=',').csv("hdfs:///opd_csv/"+name_csv+"/AX/"+name_csv+".csv")
				logging.info(f"success to convert_opd_to_df {name_file} AX")
			except Exception as e:
				logging.error(f"failed to convert_opd_to_df {name_file} AX "+str(e)+"\n")

			try:
				#values with transaction AA in OPD file
				df_aa = df1.filter( (df1.type_value_in_file  == 'D') & (df1.type_operation  == 'AA') )
				#df_cg_fields = df_cg.withColumn("HEADER_ROW",substring(df_cg.value,0,120)).withColumn("CODENT",substring(df_cg.value,121,4)).withColumn("CENTALTA",substring(df_cg.value,125,4)).withColumn("CUENTA",substring(df_cg.value,129,12)).withColumn("LAST_PAN",substring(df_cg.value,141,22)).withColumn("TIPOREG",substring(df_cg.value,163,2)).withColumn("NUMORDEN",substring(df_cg.value,165,12)).withColumn("NUMSECIMP",substring(df_cg.value,177,15)).withColumn("NUMMOV",substring(df_cg.value,192,7)).withColumn("CLAMON2",substring(df_cg.value,199,3)).withColumn("DESCLAMON2",substring(df_cg.value,202,30)).withColumn("INDNORCOR",substring(df_cg.value,232,1)).withColumn("TIPOFAC2",substring(df_cg.value,233,4)).withColumn("DESTIPFAC2",substring(df_cg.value,237,30)).withColumn("FECFAC",substring(df_cg.value,267,10)).withColumn("NUMREFFAC",substring(df_cg.value,277,23)).withColumn("CLAMONDIV2",substring(df_cg.value,300,3)).withColumn("DESCLAMOND2",substring(df_cg.value,303,30)).withColumn("SIGNODIV",substring(df_cg.value,333,1)).withColumn("IMPDIV",substring(df_cg.value,334,17)).withColumn("SIGNOFAC",substring(df_cg.value,351,1)).withColumn("IMPFAC",substring(df_cg.value,352,17)).withColumn("CMBAPLI",substring(df_cg.value,369,9)).withColumn("NUMAUT",substring(df_cg.value,378,6)).withColumn("CODCOM",substring(df_cg.value,384,15)).withColumn("NOMCOMRED",substring(df_cg.value,399,27)).withColumn("CODACT",substring(df_cg.value,426,4)).withColumn("DESACT2",substring(df_cg.value,430,30)).withColumn("SIGNOLIQ",substring(df_cg.value,460,1)).withColumn("IMPLIQ",substring(df_cg.value,461,17)).withColumn("CLAMONLIQ2",substring(df_cg.value,478,3)).withColumn("DESCLAMONL2",substring(df_cg.value,481,30)).withColumn("SIGNOIMPTO",substring(df_cg.value,511,1)).withColumn("IMPIMPTO",substring(df_cg.value,512,17)).withColumn("FECPROCES",substring(df_cg.value,529,10)).withColumn("CODPAIS2",substring(df_cg.value,539,3)).withColumn("NOMPAIS2",substring(df_cg.value,542,30)).withColumn("NOMPOB",substring(df_cg.value,572,26)).withColumn("FECCONTA",substring(df_cg.value,598,10)).withColumn("ORIGENOPE",substring(df_cg.value,608,4)).withColumn("DESORIG",substring(df_cg.value,612,30)).withColumn("TIPFRAN",substring(df_cg.value,642,4)).withColumn("DESFRA",substring(df_cg.value,646,30)).withColumn("SECOPE",substring(df_cg.value,676,12)).withColumn("NUMSECREC",substring(df_cg.value,688,15)).withColumn("SESIONRED",substring(df_cg.value,703,12)).withColumn("SIAIDCD",substring(df_cg.value,715,19)).withColumn("TIPDOCPAG",substring(df_cg.value,734,2)).withColumn("DESTIPDOC",substring(df_cg.value,736,30)).withColumn("REFDOCPAG",substring(df_cg.value,766,20)).withColumn("CALFRAUDE",substring(df_cg.value,786,3)).withColumn("FECLIQ",substring(df_cg.value,789,10)).withColumn("SIGNOAMORT",substring(df_cg.value,799,1)).withColumn("IMPAMORT",substring(df_cg.value,800,17)).withColumn("IDENTCLI",substring(df_cg.value,817,8)).withColumn("FILLER",substring(df_cg.value,825,176))
				df_aa_fields = df_aa.withColumn("HEADER_ROW",substring(df_aa._c0,0,120)).withColumn("CODENT",substring(df_aa._c0,121,4)).withColumn("CENTALTA",substring(df_aa._c0,125,4)).withColumn("CUENTA",substring(df_aa._c0,129,12)).withColumn("LAST_PAN",substring(df_aa._c0,141,22)).withColumn("TIPOREG",substring(df_aa._c0,163,2)).withColumn("NUMORDEN",substring(df_aa._c0,165,12)).withColumn("CLAMON_1",substring(df_aa._c0,177,3)).withColumn("DESCLAMON_1",substring(df_aa._c0,180,30)).withColumn("INDNORCOR",substring(df_aa._c0,210,1)).withColumn("DESNORC",substring(df_aa._c0,211,30)).withColumn("TIPOFAC_1",substring(df_aa._c0,241,4)).withColumn("DESTIPFAC_1",substring(df_aa._c0,245,30)).withColumn("FECTRN",substring(df_aa._c0,275,10)).withColumn("HORTRN",substring(df_aa._c0,285,8)).withColumn("CLAMONDIV",substring(df_aa._c0,293,3)).withColumn("DESCLAMOND",substring(df_aa._c0,296,30)).withColumn("SIGNODIV",substring(df_aa._c0,326,1)).withColumn("IMPDIV",substring(df_aa._c0,327,17)).withColumn("SIGNOAUT",substring(df_aa._c0,344,1)).withColumn("IMPAUTCON",substring(df_aa._c0,345,17)).withColumn("CMBAPLI",substring(df_aa._c0,362,9)).withColumn("NUMAUT",substring(df_aa._c0,371,6)).withColumn("CODCOM",substring(df_aa._c0,377,15)).withColumn("NOMCOMRED",substring(df_aa._c0,392,27)).withColumn("CODACT_1",substring(df_aa._c0,419,4)).withColumn("DESACT_1",substring(df_aa._c0,423,30)).withColumn("SIGNOCCA",substring(df_aa._c0,453,1)).withColumn("IMPCCA",substring(df_aa._c0,454,17)).withColumn("CLAMONCCA",substring(df_aa._c0,471,3)).withColumn("DESCLAMONCCA",substring(df_aa._c0,474,30)).withColumn("IMPTRN",substring(df_aa._c0,504,17)).withColumn("IMPCOMI",substring(df_aa._c0,521,17)).withColumn("RUT",substring(df_aa._c0,538,22)).withColumn("INDADUIR",substring(df_aa._c0,560,11)).withColumn("INDPREAUT",substring(df_aa._c0,571,1)).withColumn("TIPCLIEN",substring(df_aa._c0,572,2)).withColumn("PRODUCTO",substring(df_aa._c0,574,2)).withColumn("SUBPRODU",substring(df_aa._c0,576,4)).withColumn("INDTIPT",substring(df_aa._c0,580,2)).withColumn("SIAIDCD",substring(df_aa._c0,582,19)).withColumn("IMPUESTO",substring(df_ax._c0,601,17)).withColumn("CODRESPU",substring(df_aa._c0,618,3)).withColumn("RESOLUTOR",substring(df_aa._c0,621,11)).withColumn("CICLOVIDA",substring(df_aa._c0,632,15)).withColumn("REFEXT",substring(df_aa._c0,647,50)).withColumn("TOTALOPARCIAL",substring(df_aa._c0,697,1)).withColumn("FILLER",substring(df_aa._c0,698,422))
				df_aa_final = df_aa_fields.withColumn("PAN", when(trim(df_aa_fields.LAST_PAN) != "",concat(substring(df_aa_fields.LAST_PAN,0,6),lit("*"*6),substring(df_aa_fields.LAST_PAN,13,4))).otherwise(df_aa_fields.LAST_PAN)).selectExpr('DATE_PROCESS_FILE', 'NAME_FILE', 'ID_ROW', 'HEADER_ROW', 'CODENT', 'CENTALTA', 'CUENTA', 'PAN', 'TIPOREG', 'NUMORDEN', 'CLAMON_1', 'DESCLAMON_1', 'INDNORCOR', 'DESNORC', 'TIPOFAC_1', 'DESTIPFAC_1', 'FECTRN', 'HORTRN', 'CLAMONDIV', 'DESCLAMOND', 'SIGNODIV', 'IMPDIV', 'SIGNOAUT', 'IMPAUTCON', 'CMBAPLI', 'NUMAUT', 'CODCOM', 'NOMCOMRED', 'CODACT_1', 'DESACT_1', 'SIGNOCCA', 'IMPCCA', 'CLAMONCCA', 'DESCLAMONCCA', 'IMPTRN', 'IMPCOMI', 'RUT', 'INDADUIR', 'INDPREAUT', 'TIPCLIEN', 'PRODUCTO', 'SUBPRODU', 'INDTIPT', 'SIAIDCD', 'IMPUESTO', 'CODRESPU', 'RESOLUTOR', 'CICLOVIDA', 'REFEXT', 'TOTALOPARCIAL', 'FILLER')
				df_aa_final.coalesce(1).write.options(header='True', delimiter=',').csv("hdfs:///opd_csv/"+name_csv+"/AA/"+name_csv+".csv")
				logging.info(f"success to convert_opd_to_df {name_file} AA")
			except Exception as e:
				logging.error(f"failed to convert_opd_to_df {name_file} AA "+str(e)+"\n")

			print('hdfs dfs -ls')
			os.system("hdfs dfs -ls /")
			os.system("hdfs dfs -ls /opd_csv")
			list_file_dir = f"hdfs dfs -ls /opd_csv/{name_csv}/"
			os.system(list_file_dir)
			
	def write_files_csv_gcs(self):

		os.system("hdfs dfs -get /opd_csv .")
		print("ls ./")
		os.system("ls -la ./opd_csv")
		print("move files:"+"{0}OPD/{1}/".format(self.output,self.timestamp_bucket))
		move_files = "gsutil -m cp -r ./opd_csv/* {0}OPD/{1}/".format(self.output,self.timestamp_bucket)
		os.system(move_files)

	def write_df_to_bigquery(self):

		for name_file in self.list_file :

			name_csv = name_file.replace("_encrypted","")

			try:
				df_rejected_final = self.spark.read.options(header='True',delimiter=',',encoding='ISO-8859-1').csv("hdfs:///opd_csv/"+name_csv+"/rejected/"+name_csv+".csv")
				df_rejected_final.printSchema()
				df_rejected_final.show(10,truncate=False)
				df_rejected_final.write.format("bigquery").option("table", self.output+".rejected").mode("append").save()
				logging.info(f"success when write to bigquery {name_csv} rejected \n")
			except Exception as e:
				logging.error(f"failed when write {name_csv} in bigquery {self.output}.rejected :"+str(e)+"\n")

			try:
				df_op_final_bq = self.spark.read.options(header='True',delimiter=',',encoding='ISO-8859-1').csv("hdfs:///opd_csv/"+name_csv+"/OP/"+name_csv+".csv")
				df_op_final_bq.printSchema()
				df_op_final_bq.show(10,truncate=False)
				df_op_final_bq.write.format("bigquery").option("table", self.output+".OP").mode("append").save()
				logging.info(f"success when write to bigquery {name_csv} OP \n")
			except Exception as e:
				logging.error(f"failed when write {name_csv} in bigquery  {self.output}.OP :"+str(e)+"\n")

			try:
				df_ce_final_bq = self.spark.read.options(header='True',delimiter=',',encoding='ISO-8859-1').csv("hdfs:///opd_csv/"+name_csv+"/CE/"+name_csv+".csv")
				df_ce_final_bq.printSchema()
				df_ce_final_bq.show(10,truncate=False)
				df_ce_final_bq.write.format("bigquery").option("table", self.output+".CE").mode("append").save()
				logging.info(f"success when write to bigquery {name_csv} CE \n")
			except Exception as e:
				logging.error(f"failed when write {name_csv} in bigquery  {self.output}.CE :"+str(e)+"\n")

			try:
				df_au_final_bq = self.spark.read.options(header='True',delimiter=',',encoding='ISO-8859-1').csv("hdfs:///opd_csv/"+name_csv+"/AU/"+name_csv+".csv")
				df_au_final_bq.printSchema()
				df_au_final_bq.show(10,truncate=False)
				df_au_final_bq.write.format("bigquery").option("table", self.output+".AU").mode("append").save()
				logging.info(f"success when write to bigquery {name_csv} AU \n")
			except Exception as e:
				logging.error(f"failed when write {name_csv} in bigquery {self.output}.AU :"+str(e)+"\n")

			try:
				df_cg_final_bq = self.spark.read.options(header='True',delimiter=',',encoding='ISO-8859-1').csv("hdfs:///opd_csv/"+name_csv+"/CG/"+name_csv+".csv")
				df_cg_final_bq.printSchema()
				df_cg_final_bq.show(10,truncate=False)
				df_cg_final_bq.write.format("bigquery").option("table", self.output+".CG").mode("append").save()
				logging.info(f"success when write to bigquery {name_csv} CG \n")
			except Exception as e:
				logging.error(f"failed when write {name_csv} in bigquery  {self.output}.CG :"+str(e)+"\n")

			try:
				df_ax_final_bq = self.spark.read.options(header='True',delimiter=',',encoding='ISO-8859-1').csv("hdfs:///opd_csv/"+name_csv+"/AX/"+name_csv+".csv")
				df_ax_final_bq.printSchema()
				df_ax_final_bq.show(10,truncate=False)
				df_ax_final_bq.write.format("bigquery").option("table", self.output+".AX").mode("append").save()
				logging.info(f"success when write to bigquery {name_csv} AX \n")
			except Exception as e:
				logging.error(f"failed when write {name_csv} in bigquery  {self.output}.AX :"+str(e)+"\n")

			try:
				df_aa_final_bq = self.spark.read.options(header='True',delimiter=',',encoding='ISO-8859-1').csv("hdfs:///opd_csv/"+name_csv+"/AA/"+name_csv+".csv")
				df_aa_final_bq.printSchema()
				df_aa_final_bq.show(10,truncate=False)
				df_aa_final_bq.write.format("bigquery").option("table", self.output+".AA").mode("append").save()
				logging.info(f"success when write to bigquery {name_csv} AA \n")
			except Exception as e:
				logging.error(f"failed when write {name_csv} in bigquery  {self.output}.AA :"+str(e)+"\n")


	def run(self):
		
		self.convert_opd_to_csv()

		if (self.mode_deploy == "test") :
			self.write_files_csv_gcs()
		elif (self.mode_deploy == "prod") :
			self.write_df_to_bigquery()
		else:
			logging.info(f"not exist this type mode_deploy: {self.mode_deploy}")